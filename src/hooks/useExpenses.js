import { useQuery, useMutation } from "@apollo/client";
import { GET_EXPENSES, GET_EXPENSE_STATS } from "../graphql/queries/expense";
import {
  CREATE_EXPENSE,
  UPDATE_EXPENSE,
  DELETE_EXPENSE,
  DELETE_MULTIPLE_EXPENSES,
  ADD_EXPENSE_FILE,
} from "../graphql/mutations/expense";
import { toast } from "@/src/components/ui/sonner";

/**
 * Hook pour r√©cup√©rer les d√©penses avec filtres et pagination
 */
export const useExpenses = (filters = {}) => {
  const { data, loading: queryLoading, error: queryError, refetch } = useQuery(GET_EXPENSES, {
    variables: {
      page: 1,
      limit: 20,
      ...filters,
    },
    fetchPolicy: "cache-and-network",
    notifyOnNetworkStatusChange: false,
  });

  return {
    expenses: data?.expenses?.expenses || [],
    totalCount: data?.expenses?.totalCount || 0,
    hasNextPage: data?.expenses?.hasNextPage || false,
    loading: queryLoading,
    error: queryError,
    refetch,
  };
};

/**
 * Hook pour r√©cup√©rer les statistiques des d√©penses
 */
export const useExpenseStats = (dateRange = {}) => {
  const { data, loading: queryLoading, error: queryError } = useQuery(GET_EXPENSE_STATS, {
    variables: {
      ...dateRange,
    },
    fetchPolicy: "network-only",
  });

  return {
    stats: data?.expenseStats,
    loading: queryLoading,
    error: queryError,
  };
};

/**
 * Hook pour supprimer une d√©pense
 */
export const useDeleteExpense = () => {
  const [deleteExpenseMutation, { loading }] = useMutation(DELETE_EXPENSE, {
    refetchQueries: [GET_EXPENSES],
    awaitRefetchQueries: false,
  });

  const deleteExpense = async (id) => {
    try {
      const result = await deleteExpenseMutation({
        variables: { id },
      });

      if (result.data?.deleteExpense?.success) {
        toast.success(
          result.data.deleteExpense.message || "D√©pense supprim√©e avec succ√®s"
        );
        return { success: true };
      } else {
        throw new Error(
          result.data?.deleteExpense?.message || "Erreur lors de la suppression"
        );
      }
    } catch (error) {
      console.error("Erreur suppression d√©pense:", error);
      toast.error(
        error.message || "Erreur lors de la suppression de la d√©pense"
      );
      return { success: false, error };
    }
  };

  return {
    deleteExpense,
    loading,
  };
};

/**
 * Hook pour cr√©er une d√©pense
 */
export const useCreateExpense = () => {
  const [createExpenseMutation, { loading }] = useMutation(CREATE_EXPENSE, {
    refetchQueries: [GET_EXPENSES],
    awaitRefetchQueries: false,
  });

  const createExpense = async (input) => {
    try {
      const result = await createExpenseMutation({
        variables: { 
          input
        },
      });

      if (result.data?.createExpense) {
        toast.success("D√©pense cr√©√©e avec succ√®s");
        return { success: true, expense: result.data.createExpense };
      } else {
        throw new Error("Erreur lors de la cr√©ation de la d√©pense");
      }
    } catch (error) {
      console.error("Erreur cr√©ation d√©pense:", error);
      console.error("D√©tails de l'erreur:", error.graphQLErrors);
      console.error("Erreur r√©seau:", error.networkError);

      // Extraire le message d'erreur le plus pertinent
      let errorMessage = "Erreur lors de la cr√©ation de la d√©pense";
      if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        errorMessage = error.graphQLErrors[0].message;
      } else if (error.networkError) {
        errorMessage = "Erreur de connexion au serveur";
      }

      toast.error(errorMessage);
      return { success: false, error };
    }
  };

  return {
    createExpense,
    loading,
  };
};

/**
 * Hook pour supprimer plusieurs d√©penses
 */
export const useDeleteMultipleExpenses = () => {
  const [deleteMultipleExpensesMutation, { loading }] = useMutation(
    DELETE_MULTIPLE_EXPENSES,
    {
      // Utiliser refetchQueries sans variables sp√©cifiques pour rafra√Æchir toutes les requ√™tes GET_EXPENSES
      refetchQueries: [GET_EXPENSES],
      awaitRefetchQueries: false,
    }
  );

  const deleteMultipleExpenses = async (ids) => {
    try {
      const result = await deleteMultipleExpensesMutation({
        variables: { ids },
      });

      const response = result.data?.deleteMultipleExpenses;
      if (response) {
        const { success, deletedCount, failedCount, message, errors } =
          response;

        if (success) {
          toast.success(
            message || `${deletedCount} d√©pense(s) supprim√©e(s) avec succ√®s`
          );
        } else {
          // Afficher un message d'avertissement si certaines suppressions ont √©chou√©
          if (deletedCount > 0 && failedCount > 0) {
            toast.warning(
              `${deletedCount} d√©pense(s) supprim√©e(s), ${failedCount} √©chec(s)`
            );
          } else if (failedCount > 0) {
            toast.error(`Aucune d√©pense supprim√©e. ${failedCount} √©chec(s)`);
          }
        }

        return {
          success,
          deletedCount,
          failedCount,
          errors: errors || [],
        };
      } else {
        throw new Error("R√©ponse invalide du serveur");
      }
    } catch (error) {
      console.error("Erreur suppression multiple d√©penses:", error);
      toast.error(
        error.message || "Erreur lors de la suppression des d√©penses"
      );
      return { success: false, error };
    }
  };

  return {
    deleteMultipleExpenses,
    loading,
  };
};

/**
 * Hook pour mettre √† jour une d√©pense
 */
export const useUpdateExpense = () => {
  const [updateExpenseMutation, { loading }] = useMutation(UPDATE_EXPENSE, {
    refetchQueries: [GET_EXPENSES],
    awaitRefetchQueries: false,
  });

  const updateExpense = async (id, input) => {
    try {
      
      const result = await updateExpenseMutation({
        variables: { id, input },
      });

      if (result.data?.updateExpense) {
        toast.success("D√©pense modifi√©e avec succ√®s");
        return { success: true, expense: result.data.updateExpense };
      } else {
        console.error("‚ùå Pas de donn√©es dans result.data.updateExpense:", result.data);
        throw new Error("Erreur lors de la modification");
      }
    } catch (error) {
      console.error("Erreur modification d√©pense:", error);
      console.error("D√©tails de l'erreur:", error.graphQLErrors);
      console.error("Erreur r√©seau:", error.networkError);
      toast.error(
        error.message || "Erreur lors de la modification de la d√©pense"
      );
      return { success: false, error };
    }
  };

  return {
    updateExpense,
    loading,
  };
};

/**
 * Hook pour ajouter un fichier √† une d√©pense
 */
export const useAddExpenseFile = () => {
  const [addExpenseFileMutation, { loading }] = useMutation(ADD_EXPENSE_FILE);

  const addExpenseFile = async (expenseId, fileInput) => {
    try {
      console.log("üìé [ADD FILE MUTATION] Variables:", { expenseId, input: fileInput });
      const result = await addExpenseFileMutation({
        variables: {
          expenseId,
          input: fileInput,
        },
      });

      console.log("üìé [ADD FILE MUTATION] Result:", result);
      console.log("üìé [ADD FILE MUTATION] Result.data:", result.data);

      // Si result.data est null mais qu'il n'y a pas d'erreur, consid√©rer comme un succ√®s
      if (result.data === null && !result.errors) {
        console.log("‚ö†Ô∏è [ADD FILE MUTATION] Result.data est null mais pas d'erreur - consid√©r√© comme succ√®s");
        return { success: true, expense: null };
      }

      if (result.data?.addExpenseFile) {
        console.log("‚úÖ [ADD FILE MUTATION] Succ√®s:", result.data.addExpenseFile);
        return { success: true, expense: result.data.addExpenseFile };
      } else {
        console.error("‚ùå [ADD FILE MUTATION] Pas de donn√©es dans result.data.addExpenseFile");
        throw new Error("Erreur lors de l'ajout du fichier");
      }
    } catch (error) {
      console.error("‚ùå [ADD FILE MUTATION] Erreur:", error);
      console.error("‚ùå [ADD FILE MUTATION] GraphQL Errors:", error.graphQLErrors);
      console.error("‚ùå [ADD FILE MUTATION] Network Error:", error.networkError);
      return { success: false, error };
    }
  };

  return {
    addExpenseFile,
    loading,
  };
};
