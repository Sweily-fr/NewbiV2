import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);
const SEAT_PRICE_ID = process.env.STRIPE_SEAT_PRICE_ID; // 7.49‚Ç¨/mois par si√®ge additionnel

/**
 * Service de synchronisation de la facturation par si√®ge
 * G√®re l'ajout/suppression de si√®ges additionnels dans Stripe
 */
export class SeatSyncService {
  /**
   * Calcule le nombre de si√®ges additionnels (exclut le propri√©taire)
   * Le propri√©taire est inclus dans le plan de base √† 29‚Ç¨/mois
   * 
   * @param {string} organizationId - ID de l'organisation
   * @param {Object} adapter - Adapter Better Auth pour acc√©der √† la DB
   * @returns {Promise<number>} Nombre de si√®ges additionnels
   */
  async getAdditionalSeatsCount(organizationId, adapter) {
    try {
      const members = await adapter.findMany({
        model: "member",
        where: { organizationId }
      });
      
      // Exclure le propri√©taire (inclus dans le plan de base)
      const additionalMembers = members.filter(m => m.role !== "owner");
      
      console.log(`üìä Organisation ${organizationId}:`, {
        totalMembers: members.length,
        additionalSeats: additionalMembers.length
      });
      
      return additionalMembers.length;
    } catch (error) {
      console.error("‚ùå Erreur calcul si√®ges additionnels:", error);
      throw error;
    }
  }

  /**
   * Met √† jour l'abonnement Stripe avec le nombre de si√®ges additionnels
   * G√®re la proration automatique (facturation ou cr√©dit imm√©diat)
   * 
   * @param {string} organizationId - ID de l'organisation
   * @param {Object} adapter - Adapter Better Auth
   * @returns {Promise<Object>} R√©sultat de la synchronisation
   */
  async syncSeatsAfterInvitationAccepted(organizationId, adapter) {
    try {
      console.log(`üîÑ D√©but synchronisation si√®ges pour organisation ${organizationId}`);

      // 1. R√©cup√©rer l'abonnement de l'organisation
      const subscription = await adapter.findFirst({
        model: "subscription",
        where: { referenceId: organizationId }
      });

      if (!subscription || !subscription.stripeSubscriptionId) {
        console.warn("‚ö†Ô∏è Aucun abonnement Stripe trouv√© pour cette organisation");
        throw new Error("Aucun abonnement Stripe trouv√©");
      }

      console.log(`üìã Abonnement trouv√©: ${subscription.stripeSubscriptionId}`);

      // 2. Calculer le nombre de si√®ges additionnels
      const additionalSeats = await this.getAdditionalSeatsCount(
        organizationId,
        adapter
      );

      // 3. R√©cup√©rer l'abonnement Stripe complet
      const stripeSubscription = await stripe.subscriptions.retrieve(
        subscription.stripeSubscriptionId
      );

      console.log(`üí≥ Abonnement Stripe r√©cup√©r√©, items actuels: ${stripeSubscription.items.data.length}`);

      // 4. Trouver le subscription_item pour les si√®ges additionnels
      let seatItem = stripeSubscription.items.data.find(
        item => item.price.id === SEAT_PRICE_ID
      );

      // 5. Mettre √† jour selon le nombre de si√®ges
      if (additionalSeats > 0) {
        if (!seatItem) {
          // Cr√©er un nouvel item pour les si√®ges additionnels
          console.log(`‚ûï Cr√©ation item si√®ges: ${additionalSeats} si√®ge(s) √† 7.49‚Ç¨/mois`);
          
          await stripe.subscriptionItems.create({
            subscription: subscription.stripeSubscriptionId,
            price: SEAT_PRICE_ID,
            quantity: additionalSeats,
            proration_behavior: "create_prorations", // Facturation imm√©diate du prorata
          }, {
            idempotencyKey: `seat-add-${organizationId}-${Date.now()}`
          });

          console.log(`‚úÖ Item si√®ges cr√©√© avec succ√®s`);
        } else {
          // Mettre √† jour la quantit√© existante SEULEMENT si elle a chang√©
          const oldQuantity = seatItem.quantity;
          
          if (oldQuantity !== additionalSeats) {
            console.log(`üîÑ Mise √† jour item si√®ges: ${oldQuantity} ‚Üí ${additionalSeats} si√®ge(s)`);
            
            await stripe.subscriptionItems.update(seatItem.id, {
              quantity: additionalSeats,
              proration_behavior: "create_prorations", // Proration automatique
            }, {
              idempotencyKey: `seat-update-${organizationId}-${Date.now()}`
            });

            const difference = additionalSeats - oldQuantity;
            if (difference > 0) {
              console.log(`üí∞ Facturation prorata: +${difference} si√®ge(s)`);
            } else {
              console.log(`üí≥ Cr√©dit prorata: ${difference} si√®ge(s)`);
            }
          } else {
            console.log(`‚úÖ Quantity inchang√©e (${oldQuantity} si√®ge(s)), pas de mise √† jour n√©cessaire`);
          }
        }
      } else if (seatItem && additionalSeats === 0) {
        // Supprimer l'item si plus de si√®ges additionnels
        console.log(`‚ûñ Suppression item si√®ges (aucun collaborateur additionnel)`);
        
        await stripe.subscriptionItems.del(seatItem.id, {
          proration_behavior: "create_prorations", // Cr√©dit du prorata
        });

        console.log(`‚úÖ Item si√®ges supprim√©, cr√©dit appliqu√©`);
      }

      // 6. Mettre √† jour la base de donn√©es locale (seulement si changement)
      if (subscription.seatQuantity !== additionalSeats) {
        await adapter.update({
          model: "subscription",
          where: { id: subscription.id },
          data: { 
            seatQuantity: additionalSeats,
            updatedAt: new Date()
          }
        });
        console.log(`üìù BDD mise √† jour: seatQuantity = ${additionalSeats}`);
      } else {
        console.log(`üìù BDD d√©j√† √† jour (seatQuantity = ${additionalSeats})`);
      }

      console.log(`‚úÖ Synchronisation termin√©e: ${additionalSeats} si√®ge(s) additionnel(s)`);
      console.log(`üí∞ Facturation mensuelle: 29‚Ç¨ (base) + ${additionalSeats} √ó 7.49‚Ç¨ = ${29 + (additionalSeats * 7.49)}‚Ç¨`);

      return { 
        success: true, 
        seats: additionalSeats,
        totalCost: 29 + (additionalSeats * 7.49)
      };
    } catch (error) {
      console.error("‚ùå Erreur synchronisation si√®ges:", error);
      console.error("Stack:", error.stack);
      throw error;
    }
  }

  /**
   * Synchronise apr√®s suppression de membre
   * Utilise la m√™me logique que l'acceptation d'invitation
   * 
   * @param {string} organizationId - ID de l'organisation
   * @param {Object} adapter - Adapter Better Auth
   * @returns {Promise<Object>} R√©sultat de la synchronisation
   */
  async syncSeatsAfterMemberRemoved(organizationId, adapter) {
    console.log(`üóëÔ∏è Synchronisation apr√®s suppression de membre`);
    return this.syncSeatsAfterInvitationAccepted(organizationId, adapter);
  }

  /**
   * R√©cup√®re les informations de facturation actuelles
   * Utile pour afficher dans l'interface utilisateur
   * 
   * @param {string} organizationId - ID de l'organisation
   * @param {Object} adapter - Adapter Better Auth
   * @returns {Promise<Object>} Informations de facturation
   */
  async getBillingInfo(organizationId, adapter) {
    try {
      const subscription = await adapter.findFirst({
        model: "subscription",
        where: { referenceId: organizationId }
      });

      if (!subscription) {
        return {
          hasSubscription: false,
          baseCost: 0,
          additionalSeats: 0,
          seatCost: 0,
          totalCost: 0
        };
      }

      const additionalSeats = await this.getAdditionalSeatsCount(
        organizationId,
        adapter
      );

      const baseCost = 29; // Plan Pro Base
      const seatCost = additionalSeats * 7.49;
      const totalCost = baseCost + seatCost;

      return {
        hasSubscription: true,
        baseCost,
        additionalSeats,
        seatCost,
        totalCost,
        currency: "EUR"
      };
    } catch (error) {
      console.error("‚ùå Erreur r√©cup√©ration info facturation:", error);
      throw error;
    }
  }
}

// Export singleton
export const seatSyncService = new SeatSyncService();
