import { auth } from "@/src/lib/auth";
import { headers } from "next/headers";

export async function GET(request, { params }) {
  try {
    const { id } = await params;
    
    // R√©cup√©rer la session utilisateur
    const session = await auth.api.getSession({
      headers: await headers()
    });

    if (!session) {
      return Response.json({ error: "Non authentifi√©" }, { status: 401 });
    }

    console.log('üîç Recherche invitation avec ID:', id);
    console.log('üë§ Session utilisateur:', session.user.email);

    // R√©cup√©rer toutes les invitations de l'utilisateur
    // Utiliser l'API interne Better Auth avec les bons param√®tres
    const invitations = await auth.api.listInvitations({
      headers: await headers(),
      query: {
        email: session.user.email
      }
    });

    console.log('üìã Invitations trouv√©es:', invitations?.length || 0);

    // Trouver l'invitation sp√©cifique par ID
    const invitation = invitations?.find(inv => inv.id === id);

    if (!invitation) {
      console.log('‚ùå Invitation non trouv√©e pour ID:', id);
      return Response.json({ error: "Invitation non trouv√©e" }, { status: 404 });
    }

    console.log('‚úÖ Invitation trouv√©e:', invitation);
    return Response.json(invitation);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration de l'invitation:", error);
    return Response.json({ error: "Erreur serveur", details: error.message }, { status: 500 });
  }
}

export async function POST(request, { params }) {
  try {
    const { id } = await params;
    const { action } = await request.json();
    
    // R√©cup√©rer la session utilisateur
    const session = await auth.api.getSession({
      headers: await headers()
    });

    if (!session) {
      return Response.json({ error: "Non authentifi√©" }, { status: 401 });
    }

    console.log(`üéØ Action ${action} sur invitation:`, id);

    if (action === 'accept') {
      const result = await auth.api.acceptInvitation({
        headers: await headers(),
        body: { invitationId: id }
      });
      console.log('‚úÖ Invitation accept√©e:', result);
      return Response.json(result);
    } else if (action === 'reject') {
      const result = await auth.api.rejectInvitation({
        headers: await headers(),
        body: { invitationId: id }
      });
      console.log('‚ùå Invitation rejet√©e:', result);
      return Response.json(result);
    } else {
      return Response.json({ error: "Action non valide" }, { status: 400 });
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de l'action sur l'invitation:", error);
    return Response.json({ error: "Erreur serveur", details: error.message }, { status: 500 });
  }
}
