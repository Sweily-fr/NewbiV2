import { useEffect, useRef } from 'react';
import { useSubscription } from '@apollo/client';
import { COLUMN_UPDATED_SUBSCRIPTION } from '@/src/graphql/kanbanQueries';

/**
 * Hook pour synchroniser les colonnes en temps r√©el via WebSocket/Redis
 * @param {string} boardId - ID du tableau Kanban
 * @param {string} workspaceId - ID de l'espace de travail
 * @param {Array} localColumns - √âtat local des colonnes
 * @param {Function} setLocalColumns - Fonction pour mettre √† jour les colonnes locales
 * @returns {Object} - √âtat de la synchronisation
 */
export function useKanbanRealtimeSync(boardId, workspaceId, localColumns, setLocalColumns) {
  const lastUpdateRef = useRef(null);
  const isUpdatingRef = useRef(false);

  // Log des param√®tres au montage
  useEffect(() => {
    console.log('üîß [Realtime] Hook initialis√© avec:', {
      boardId,
      workspaceId,
      columnsCount: localColumns?.length
    });
  }, [boardId, workspaceId, localColumns?.length]);

  // Subscription pour les mises √† jour de colonnes
  const { data: columnData, loading: columnLoading, error: columnError } = useSubscription(
    COLUMN_UPDATED_SUBSCRIPTION,
    {
      variables: { boardId, workspaceId },
      skip: !boardId || !workspaceId,
      onSubscriptionData: ({ subscriptionData }) => {
        console.log('üì° [Realtime] √âv√©nement colonne re√ßu:', subscriptionData);
      },
    }
  );

  // Logger l'√©tat de la subscription
  useEffect(() => {
    console.log('üìä [Realtime] √âtat subscription:', {
      loading: columnLoading,
      hasData: !!columnData,
      hasError: !!columnError,
      skip: !boardId || !workspaceId
    });
  }, [columnLoading, columnData, columnError, boardId, workspaceId]);

  // G√©rer les mises √† jour de colonnes en temps r√©el
  useEffect(() => {
    console.log('üîç [Realtime] useEffect d√©clench√©, columnData:', columnData);
    
    if (!columnData?.columnUpdated) {
      console.log('‚ö†Ô∏è [Realtime] Pas de donn√©es columnUpdated');
      return;
    }

    const { type, column, columns, columnId } = columnData.columnUpdated;
    const now = Date.now();

    console.log('üì¶ [Realtime] Donn√©es re√ßues:', {
      type,
      hasColumn: !!column,
      hasColumns: !!columns,
      columnsArray: columns,
      columnId,
      isUpdating: isUpdatingRef.current,
      lastUpdate: lastUpdateRef.current,
      timeSinceLastUpdate: lastUpdateRef.current ? now - lastUpdateRef.current : null
    });

    // √âviter les boucles infinies - ignorer si on vient de faire une mise √† jour
    if (lastUpdateRef.current && now - lastUpdateRef.current < 500) {
      console.log('‚è≠Ô∏è [Realtime] Mise √† jour ignor√©e (trop r√©cente)');
      return;
    }

    // √âviter de traiter nos propres mises √† jour
    if (isUpdatingRef.current) {
      console.log('‚è≠Ô∏è [Realtime] Mise √† jour ignor√©e (en cours)');
      return;
    }

    console.log(`üîÑ [Realtime] Traitement √©v√©nement: ${type}`);

    switch (type) {
      case 'CREATED':
        if (column) {
          console.log('‚ûï [Realtime] Ajout colonne:', column.title);
          setLocalColumns(prev => {
            // V√©rifier si la colonne existe d√©j√†
            if (prev.some(c => c.id === column.id)) {
              return prev;
            }
            return [...prev, column].sort((a, b) => a.order - b.order);
          });
        }
        break;

      case 'UPDATED':
        if (column) {
          console.log('‚úèÔ∏è [Realtime] Mise √† jour colonne:', column.title);
          setLocalColumns(prev =>
            prev.map(c => (c.id === column.id ? { ...c, ...column } : c))
          );
        }
        break;

      case 'DELETED':
        if (columnId) {
          console.log('üóëÔ∏è [Realtime] Suppression colonne:', columnId);
          setLocalColumns(prev => prev.filter(c => c.id !== columnId));
        }
        break;

      case 'REORDERED':
        if (columns && Array.isArray(columns)) {
          console.log('üîÄ [Realtime] R√©organisation colonnes:', columns);
          
          // Cr√©er un mapping de l'ordre des colonnes
          const orderMap = {};
          columns.forEach((id, index) => {
            orderMap[id] = index;
          });

          // Mettre √† jour l'ordre des colonnes locales
          setLocalColumns(prev => {
            const updated = prev.map(col => ({
              ...col,
              order: orderMap[col.id] !== undefined ? orderMap[col.id] : col.order
            }));
            
            // Trier par le nouvel ordre
            return updated.sort((a, b) => a.order - b.order);
          });

          lastUpdateRef.current = now;
        }
        break;

      default:
        console.warn('‚ö†Ô∏è [Realtime] Type d\'√©v√©nement inconnu:', type);
    }
  }, [columnData, setLocalColumns]);

  // Logger les erreurs de subscription
  useEffect(() => {
    if (columnError) {
      console.error('‚ùå [Realtime] Erreur subscription colonnes:', columnError);
    }
  }, [columnError]);

  // Fonction pour marquer qu'on est en train de faire une mise √† jour
  const markAsUpdating = () => {
    isUpdatingRef.current = true;
    console.log('üîí [Realtime] Blocage temporaire activ√©');
    setTimeout(() => {
      isUpdatingRef.current = false;
      console.log('üîì [Realtime] Blocage temporaire d√©sactiv√©');
    }, 200); // R√©duit √† 200ms au lieu de 1000ms
  };

  return {
    isConnected: !columnLoading && !columnError,
    error: columnError,
    markAsUpdating,
  };
}
