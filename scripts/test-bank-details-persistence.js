#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la persistance des param√®tres d'affichage des coordonn√©es bancaires
 */

import { MongoClient } from 'mongodb';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const MONGODB_DB_NAME = process.env.MONGODB_DB_NAME || 'invoice-app';

async function testBankDetailsPersistence() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    const db = client.db(MONGODB_DB_NAME);
    const organizationCollection = db.collection('organization');
    
    // Trouver une organisation de test
    const organization = await organizationCollection.findOne({});
    
    if (!organization) {
      console.log('‚ùå Aucune organisation trouv√©e pour le test');
      return;
    }
    
    console.log(`üìã Test avec l'organisation: ${organization.companyName || organization.id}`);
    
    // V√©rifier les champs de param√®tres de document
    const documentFields = [
      'documentTextColor',
      'documentHeaderTextColor', 
      'documentHeaderBgColor',
      'documentHeaderNotes',
      'documentFooterNotes',
      'documentTermsAndConditions',
      'showBankDetails'
    ];
    
    console.log('\nüîç V√©rification des champs de param√®tres de document:');
    documentFields.forEach(field => {
      const value = organization[field];
      const status = value !== undefined ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${field}: ${value !== undefined ? value : 'non d√©fini'}`);
    });
    
    // Test de mise √† jour du champ showBankDetails
    console.log('\nüß™ Test de mise √† jour showBankDetails...');
    
    const newValue = !organization.showBankDetails;
    const updateResult = await organizationCollection.updateOne(
      { _id: organization._id },
      { $set: { showBankDetails: newValue } }
    );
    
    if (updateResult.modifiedCount === 1) {
      console.log(`‚úÖ Mise √† jour r√©ussie: showBankDetails = ${newValue}`);
      
      // V√©rifier la mise √† jour
      const updatedOrg = await organizationCollection.findOne({ _id: organization._id });
      if (updatedOrg.showBankDetails === newValue) {
        console.log('‚úÖ V√©rification: la valeur a bien √©t√© persist√©e');
        
        // Remettre la valeur d'origine
        await organizationCollection.updateOne(
          { _id: organization._id },
          { $set: { showBankDetails: organization.showBankDetails } }
        );
        console.log('‚úÖ Valeur d\'origine restaur√©e');
      } else {
        console.log('‚ùå Erreur: la valeur n\'a pas √©t√© persist√©e correctement');
      }
    } else {
      console.log('‚ùå Erreur lors de la mise √† jour');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await client.close();
    console.log('\nüîå Connexion MongoDB ferm√©e');
  }
}

// Ex√©cuter le test
testBankDetailsPersistence().catch(console.error);
