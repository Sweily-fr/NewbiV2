#!/usr/bin/env node

/**
 * Script pour r√©initialiser l'onboarding d'une organisation
 * Usage: node scripts/reset-onboarding.js [organizationId]
 */

import { MongoClient } from 'mongodb';

// Configuration MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const DB_NAME = process.env.MONGODB_DB_NAME || 'newbi';

async function resetOnboarding(organizationId = null) {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    const db = client.db(DB_NAME);
    const organizationsCollection = db.collection('organization');
    
    let filter = {};
    if (organizationId) {
      filter = { id: organizationId };
    }
    
    // R√©initialiser l'onboarding
    const result = await organizationsCollection.updateMany(
      filter,
      {
        $set: {
          hasCompletedOnboarding: false,
          onboardingStep: 0
        }
      }
    );
    
    console.log(`‚úÖ Onboarding r√©initialis√© pour ${result.modifiedCount} organisation(s)`);
    
    if (organizationId) {
      console.log(`üéØ Organisation cibl√©e: ${organizationId}`);
    } else {
      console.log('üåç Toutes les organisations ont √©t√© r√©initialis√©es');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error);
  } finally {
    await client.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
}

// R√©cup√©rer l'ID d'organisation depuis les arguments
const organizationId = process.argv[2];

if (organizationId) {
  console.log(`üöÄ R√©initialisation de l'onboarding pour l'organisation: ${organizationId}`);
} else {
  console.log('üöÄ R√©initialisation de l\'onboarding pour TOUTES les organisations');
  console.log('‚ö†Ô∏è  Pour cibler une organisation sp√©cifique: node scripts/reset-onboarding.js [organizationId]');
}

resetOnboarding(organizationId);
